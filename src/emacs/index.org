#+TITLE: emacs.el
#+DATE: <2023-11-12 zo>
#+PROPERTY: header-args :tangle yes


#+begin_quote
Work in progress, there will be errors
#+end_quote


* installation
#+begin_src emacs-lisp :tangle no :results silent
  (org-babel-tangle)
  (let ((dir (file-name-directory (buffer-file-name)))
	(target "~/.config/emacs-org/src"))
    (delete-file "~/.emacs.d/init.el")
    (make-directory "~/.config/emacs-org/" t)
    (cond
;     ((file-directory-p target) (delete-directory target t))
     ((file-symlink-p target) (delete-file target)))
    (make-symbolic-link dir target t)
    (make-symbolic-link (concat dir "init.el") "~/.emacs.d/init.el" t))
  (message "emacs conf bootstrapped, please relaunch emacs")
#+end_src

* init
#+begin_src emacs-lisp :tangle init.el
 (when (version< "27" emacs-version)
  (setq package-enable-at-startup nil))

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'org)
(straight-use-package 'use-package)
#+end_src

#+begin_src emacs-lisp :tangle init.el
(require 'org)
(message "hello")
(org-babel-load-file "~/.config/emacs-org/src/index.org")
#+end_src

* context  
throughout loading our configs we'll need to know whether to enable certain elements.  This sets up all predicates for any kind of selection we'll need.  We start off with a few indicators as to which kind of device we're dealing with. 
#+begin_src emacs-lisp
  (intern "my/phone")
  (intern "my/laptop")
  (intern "my/uconsole")
  (intern "my/boox")
  (intern "my/unknown")
#+end_src

#+begin_src emacs-lisp
  (defconst my/device-type
    (let ((phone (file-exists-p "~/.DEVICE_PHONE"))
	  (boox (file-exists-p "~/.DEVICE_BOOX"))
	  (hostname (system-name)))
      (cond
       (phone 'my/phone)
       (boox 'my/boox)
       ((string= hostname "jeroen-XPS-9320") 'my/laptop)
       (t 'my/unknown))))

  (defun my/device-phone-p ()
    (eq my/device-type 'my/phone))

  (defun my/device-laptop-p ()
    (eq my/device-type 'my/laptop))

  (defun my/device-boox-p ()
    (eq my/device-type 'my/boox))

  (defun my/prefer-light-p ()
    (my/device-boox-p))

#+end_src

We'll also want to know if there's a window manager available. 
#+begin_src emacs-lisp
(defun my/window-manager-p ()
  (and (display-graphic-p)
       (progn (when (get-buffer " *window-manager*")
                (kill-buffer " *window-manager*"))
              (when (get-buffer " *window-manager-error*")
                (kill-buffer " *window-manager-error*"))
              (when (executable-find "wmctrl")
                (shell-command "wmctrl -m ; echo $?" " *window-manager*" " *window-manager-error*"))
              (eq nil (get-buffer " *window-manager-error*")))))
#+end_src


* org babel

We'll be loading different org files for parsing so let's make it easy and less error sensitive, so if one file fails, it won't take down the rest of the execution.

#+begin_src emacs-lisp
(defconst my/emacs-org-conf-basepath "~/.config/emacs-org/src/")

(defun my/emacs-org-load-file (filename)
  ""
  (condition-case err
      (org-babel-load-file (concat my/emacs-org-conf-basepath filename))
    ((debug error) (progn
                     (message (format "Error loading org-file: %S (%s)\n" err filename))
                   (with-current-buffer (get-buffer-create "*org-load-errors*")
                     (goto-char (point-max))
                     (insert (format "Error loading org-file: %S (%s)\n" err filename))
                     (insert (with-temp-buffer (backtrace) (buffer-string))))))))

#+end_src

* exwm

- config :: [[file:exwm.org][exwm.org]]
  
Code specific to exwm, should only be included at specific situations. 
  
#+begin_src emacs-lisp
(when (and (not (my/device-phone-p))
           (display-graphic-p)
           (not (my/window-manager-p)))
  (my/emacs-org-load-file "exwm.org"))
#+end_src

* interface
[[file:interface.org][interface.org]]

#+begin_src emacs-lisp
(my/emacs-org-load-file "interface.org")
#+end_src

* org
[[file:org.org][org.org]]
#+begin_src emacs-lisp
(my/emacs-org-load-file "org.org")
#+end_src

* generic development
[[file:development.org][development.org]]
#+begin_src emacs-lisp
(my/emacs-org-load-file "development.org")
#+end_src

